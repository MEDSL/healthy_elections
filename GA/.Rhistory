#   geom_point(size = 3) +
#   medsl_plot()
#
# mtcars %>%
#   ggplot(aes(mpg, disp, color = factor(carb))) +
#   geom_point(size=3) +
#   medsl_plot() + scale_color_medsl()
#
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size = 3) +
medsl_plot()
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
#import data from a csv or excel file here, typically created by Stata
#plotting code here: example from MEDSL github documentation (https://github.com/MEDSL/ggmedsl)
#
# mtcars %>%
#   ggplot(aes(mpg, disp, color = factor(carb))) +
#   geom_point(size = 3) +
#   medsl_plot()
#
# mtcars %>%
#   ggplot(aes(mpg, disp, color = factor(carb))) +
#   geom_point(size=3) +
#   medsl_plot() + scale_color_medsl()
#
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size = 3) +
medsl_plot()
devtools::install_github("medsl/ggmedsl")
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
library(ggmedsl)
#import data from a csv or excel file here, typically created by Stata
#plotting code here: example from MEDSL github documentation (https://github.com/MEDSL/ggmedsl)
#
# mtcars %>%
#   ggplot(aes(mpg, disp, color = factor(carb))) +
#   geom_point(size = 3) +
#   medsl_plot()
#
# mtcars %>%
#   ggplot(aes(mpg, disp, color = factor(carb))) +
#   geom_point(size=3) +
#   medsl_plot() + scale_color_medsl()
#
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size = 3) +
medsl_plot()
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size = 3) +
medsl_plot() +
scale_color_medsl()
library(dplyr)
library(tidyverse)
library(ggmedsl)
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size = 3) +
medsl_plot()
mtcars %>%
ggplot(aes(mpg, disp, color = factor(carb))) +
geom_point(size=3) +
medsl_plot() + scale_color_medsl()
test <- mtcars
View(test)
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
library(ggmedsl)
#import data from a csv or excel file here, typically created by Stata
df <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/TX/code/results/mailincompare2016.csv",header = TRUE)
View(df)
View(df)
df %>%
ggplot(aes(daysbefore, n_early_cumulative, color = factor(party))) +
geom_point(size=3) +
medsl_plot() + scale_color_medsl()
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
library(ggmedsl)
#import data from a csv or excel file here, typically created by Stata
df <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/TX/code/results/mailincompare2016.csv",header = TRUE)
df %>%
ggplot(aes(daysbefore, n_early_cumulative, color = factor(party))) +
geom_point(size=3) +
medsl_plot() + scale_color_medsl()
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
library(ggmedsl)
#import data from a csv or excel file here, typically created by Stata
df <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/TX/code/results/mailincompare2016.csv",header = TRUE)
df %>%
ggplot(aes(daysbefore, n_early_cumulative, color = factor(year))) +
geom_point(size=3) +
medsl_plot() + scale_color_medsl()
# Kevin DeLuca
# creating MEDSL graphics code, for Healthy Elections
# 6/15/20
library(dplyr)
library(tidyverse)
library(ggmedsl)
#import data from a csv or excel file here, typically created by Stata
df <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/TX/code/results/mailincompare2016.csv",header = TRUE)
df %>%
ggplot(aes(daysbefore, n_early_cumulative, color = factor(year))) +
geom_point(size=3) +
medsl_plot() + scale_color_medsl()
# MEDSL Healthy Elections: GA
# Mapping
# 7/30/20
rm(list = ls())
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/code/Rmaps"
setwd(wd)
# Packages
library(tidyr)
library(dplyr)
library(knitr)
library(kableExtra)
library(haven)
library(ggmedsl)
library(sf)
library(data.table)
library(foreign)
library(stringr)
library(ggplot2)
library(gridExtra)
theme_plot <- function () {
theme_linedraw(base_size=10) %+replace%
theme(
panel.border=element_blank(),
panel.grid.major=element_line(color="#C4C4C4"),
panel.grid.minor=element_line(color="#C4C4C4"),
strip.text=element_text(color="#525971",size=11,margin=margin(0,0,8,0)),
strip.background=element_rect(fill=NA,color=NA),
plot.title=element_text(color="#525971",size=12,margin=margin(0,0,12,0)),
legend.title=element_text(color="#525971",size=10,margin=margin(0,0,0,0)),
legend.text=element_text(color="#525971",size=10,margin=margin(0,0,0,0)),
axis.title.x=element_text(color="#525971",size=10,margin=margin(10,0,0,0)),
axis.title.y=element_text(color="#525971",size=10,angle=90,margin=margin(0,10,0,0)),
axis.text.x=element_text(color="#525971"),
axis.text.y=element_text(color="#525971"))
}
theme_set(theme_plot())
#county level data for GA
GAcountydta <- read_dta("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/data/countylevelanalysis.dta")
#Mapping: Counties in GA
GAshp <- read_sf("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/data/maps/Counties_Georgia-shp/Counties_Georgia.shp") #%>%
#  mutate(GEOID10=as.numeric(GEOID10))
#reg_phi16 <- read_sf(
#  paste0(wd,"input/pa/shp_philadelphia_reg/qualified_voter_listing_2016_primary_by_ward.shp")) %>%
#  as.data.frame() %>% select(-geometry) %>% mutate(ward=as.numeric(gsub("^WD|^Totals.","",ward)))
#names(reg_phi16)[2:ncol(reg_phi16)] <- paste0(names(reg_phi16)[2:ncol(reg_phi16)],"16")
GAshp$GEOID10 <- as.numeric(as.character(GAshp$GEOID10))
GAmap <- merge(x=GAcountydta, y=GAshp, by.x = "fips", by.y = "GEOID10")
mapVBM2020 <- ggplot() +
geom_sf(data = GAmap, aes(geometry = geometry, fill=bymail_2020combopri), col="black") +
theme_plot() + scale_fill_gradient(low="#78BBFE",high="#0020C2") +
theme(panel.grid.major = element_line(colour = "transparent"), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(fill="Proportion Voting by Mail",title="2020 Primary, by County")
mapVBM2020
ggsave("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/code/Rmaps/results/VBM2020.png",width=8,height=6)
mapVBM2016 <- ggplot() +
geom_sf(data = GAmap, aes(geometry = geometry, fill=bymail_2016prepri), col="black") +
theme_plot() + scale_fill_gradient(low="#78BBFE",high="#0020C2") +
theme(panel.grid.major = element_line(colour = "transparent"), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(fill="Proportion Voting by Mail",title="2016 Primary, by County")
mapVBM2016
ggsave("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/code/Rmaps/results/VBM2016.png",width=8,height=6)
mapVBM2018gen <- ggplot() +
geom_sf(data = GAmap, aes(geometry = geometry, fill=bymail_2018genpri), col="black") +
theme_plot() + scale_fill_gradient(low="#78BBFE",high="#0020C2") +
theme(panel.grid.major = element_line(colour = "transparent"), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(fill="Proportion Voting by Mail",title="2018 General, by County")
mapVBM2018gen
ggsave("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/HealthyElections/GA/code/Rmaps/results/VBM2018gen.png",width=8,height=6)
#COVID PLOT
###############################################################################################
############### MEDSL Healthy Elections COVID Rate CleanR #################################
##########################################################################################
library(ggplot2)
library(ggalt)
library(grid)
library(dplyr)
library(stringr)
library(BAMMtools) #pkg to create nat jenks breaks
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
library(extrafont)#these allow you to read in the non-default fonts
library(showtext)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("Original PPP Date", x=0.1,  y=0.8, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("Original General Primary", x=0.6,  y=0.8, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
cases_plot_all
grob_start <- grobTree(textGrob("Original PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("Original General Primary", x=0.55,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
View(cases_plot_all)
View(covid_cases)
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(new_cases,7,na.pad=T))
View(covid_primary_dateGP2)
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(new_cases,7,fill=NA))
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(new_cases,7,if (na.pad) NA, na.pad = FALSE))
ts_covid_all <- covid_cases %>% mutate(roll_mean = rollmean(new_cases,7,if (na.pad) NA, na.pad = FALSE))
View(covid_cases)
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
# Packages
library(tidyr)
library(dplyr)
library(knitr)
library(kableExtra)
library(haven)
library(ggmedsl)
library(sf)
library(data.table)
library(foreign)
library(stringr)
library(ggplot2)
library(gridExtra)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("Original PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("Original General Primary", x=0.55,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("PPP Date", x=0.1,  y=0, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("General Primary", x=0.55,  y=0, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("General Primary", x=0.55,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("General Primary", x=0.5,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
ts_covid_all <- covid_cases %>% group_by(date) %>% mutate(roll_mean = rollmean(cases,7,if (na.pad) NA, na.pad = FALSE))
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("General Primary", x=0.5,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
font_import("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/fonts/styrene_b")  #specify font path here
options(stringsAsFactors = F)
wd <- "/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/GA" # set working directory
setwd(wd)
covid_cases <- read.csv("/Users/cantstopkevin/Documents/HarvardDesktop/MEDSL/github/healthy_elections/general/outside_data/us-counties-nyt.csv") # read in the COVID data from the NYT
covid_cases <- subset(covid_cases, state=="Georgia") ###subset the data to equal the state of interest
#The fields are : date, county (title case), state (title case), fips (st_fips+county_fips), cases, and deaths.
#note that the deaths are excess deaths above the distribution of deaths given a model that the NYT has
#### the covid data set is formatted as %y-%m-%d , i.e. 2020-04-21 . Can subset via the following example
#covid_primary_date <- subset(covid_cases, date=="2020-04-03")
covid_primary_datePPP <- subset(covid_cases, date=="2020-03-24") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP <- subset(covid_cases, date=="2020-05-19") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
covid_primary_dateGP2 <- subset(covid_cases, date=="2020-06-09") # set the date to the day of the primary to run a scatterplot of some sort , then merge onto
#path to medsl colors: http://www.mit.edu/~medsl/brand/charts/index.html ; use this to choose colors of interest
####general non-grouped plot
ts_covid_all <- covid_cases %>% group_by(date) %>% dplyr::summarize(total_cases = sum(cases,na.rm=T),total_deaths=sum(deaths,na.rm=T))
ts_covid_all$Date <- as.Date(ts_covid_all$date)
ts_covid_all <- ts_covid_all %>% mutate(lag_cases=lag(total_cases))
ts_covid_all$new_cases <- ts_covid_all$total_cases - ts_covid_all$lag_cases
sort(unique(ts_covid_all$date))
cases_plot_all <- ggplot(ts_covid_all, aes(x = Date, y = new_cases)) +
geom_line(color="#156DD0", size=1)+
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[79]), color="#37C256" ), linetype=4, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[100]), color="#C0BA79" ), linetype=5, show.legend = F) +
geom_vline(aes(xintercept=as.numeric(sort(unique(ts_covid_all$Date))[23]), color="#F6573E" ), linetype=2, show.legend = F)
cases_plot_all
grob_start <- grobTree(textGrob("PPP Date", x=0.1,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob_prim <- grobTree(textGrob("General Primary", x=0.5,  y=0.1, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
grob2weeks <-   grobTree(textGrob("Actual Combined \nPrimary Date", x=0.8,  y=0.2, hjust=0,
gp=gpar(col="black", fontsize=8, fontface="bold")))
cases_plot_all <- cases_plot_all +  annotation_custom(grob_start) +  annotation_custom(grob_prim) + annotation_custom(grob2weeks) +
labs( title= "COVID-19 Cases, Georgia 2020 Primary Elections", y="New Cases") + theme_minimal()
cases_plot_all
cases_plot_all <- cases_plot_all + theme(title = element_text(size = rel(1.4), family="Styrene B")) #example plot of new cases
ggsave("covid_GA_plot.jpg", plot = cases_plot_all, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
